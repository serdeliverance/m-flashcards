/*
 * This file is generated by jOOQ.
 */
package io.github.sd3v.mflashcardsbe.jooq.tables;


import io.github.sd3v.mflashcardsbe.jooq.Keys;
import io.github.sd3v.mflashcardsbe.jooq.Public;
import io.github.sd3v.mflashcardsbe.jooq.tables.records.FlashcardRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Flashcard extends TableImpl<FlashcardRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.flashcard</code>
     */
    public static final Flashcard FLASHCARD = new Flashcard();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FlashcardRecord> getRecordType() {
        return FlashcardRecord.class;
    }

    /**
     * The column <code>public.flashcard.id</code>.
     */
    public final TableField<FlashcardRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.flashcard.front</code>.
     */
    public final TableField<FlashcardRecord, String> FRONT = createField(DSL.name("front"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.flashcard.back</code>.
     */
    public final TableField<FlashcardRecord, String> BACK = createField(DSL.name("back"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.flashcard.example</code>.
     */
    public final TableField<FlashcardRecord, String> EXAMPLE = createField(DSL.name("example"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.flashcard.deck_id</code>.
     */
    public final TableField<FlashcardRecord, Long> DECK_ID = createField(DSL.name("deck_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Flashcard(Name alias, Table<FlashcardRecord> aliased) {
        this(alias, aliased, null);
    }

    private Flashcard(Name alias, Table<FlashcardRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.flashcard</code> table reference
     */
    public Flashcard(String alias) {
        this(DSL.name(alias), FLASHCARD);
    }

    /**
     * Create an aliased <code>public.flashcard</code> table reference
     */
    public Flashcard(Name alias) {
        this(alias, FLASHCARD);
    }

    /**
     * Create a <code>public.flashcard</code> table reference
     */
    public Flashcard() {
        this(DSL.name("flashcard"), null);
    }

    public <O extends Record> Flashcard(Table<O> child, ForeignKey<O, FlashcardRecord> key) {
        super(child, key, FLASHCARD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<FlashcardRecord, Long> getIdentity() {
        return (Identity<FlashcardRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FlashcardRecord> getPrimaryKey() {
        return Keys.FLASHCARD_PKEY;
    }

    @Override
    public List<ForeignKey<FlashcardRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FLASHCARD__FK_DECK_ID);
    }

    private transient Deck _deck;

    /**
     * Get the implicit join path to the <code>public.deck</code> table.
     */
    public Deck deck() {
        if (_deck == null)
            _deck = new Deck(this, Keys.FLASHCARD__FK_DECK_ID);

        return _deck;
    }

    @Override
    public Flashcard as(String alias) {
        return new Flashcard(DSL.name(alias), this);
    }

    @Override
    public Flashcard as(Name alias) {
        return new Flashcard(alias, this);
    }

    @Override
    public Flashcard as(Table<?> alias) {
        return new Flashcard(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Flashcard rename(String name) {
        return new Flashcard(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Flashcard rename(Name name) {
        return new Flashcard(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Flashcard rename(Table<?> name) {
        return new Flashcard(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, String, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super String, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super String, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
