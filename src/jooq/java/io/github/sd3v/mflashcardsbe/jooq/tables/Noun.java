/*
 * This file is generated by jOOQ.
 */
package io.github.sd3v.mflashcardsbe.jooq.tables;


import io.github.sd3v.mflashcardsbe.jooq.Keys;
import io.github.sd3v.mflashcardsbe.jooq.Public;
import io.github.sd3v.mflashcardsbe.jooq.tables.records.NounRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Noun extends TableImpl<NounRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.noun</code>
     */
    public static final Noun NOUN = new Noun();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NounRecord> getRecordType() {
        return NounRecord.class;
    }

    /**
     * The column <code>public.noun.id</code>.
     */
    public final TableField<NounRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.noun.name</code>.
     */
    public final TableField<NounRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.noun.description</code>.
     */
    public final TableField<NounRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.noun.article</code>.
     */
    public final TableField<NounRecord, String> ARTICLE = createField(DSL.name("article"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.noun.fullname</code>.
     */
    public final TableField<NounRecord, String> FULLNAME = createField(DSL.name("fullname"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.noun.tags</code>.
     */
    public final TableField<NounRecord, String> TAGS = createField(DSL.name("tags"), SQLDataType.VARCHAR(255), this, "");

    private Noun(Name alias, Table<NounRecord> aliased) {
        this(alias, aliased, null);
    }

    private Noun(Name alias, Table<NounRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.noun</code> table reference
     */
    public Noun(String alias) {
        this(DSL.name(alias), NOUN);
    }

    /**
     * Create an aliased <code>public.noun</code> table reference
     */
    public Noun(Name alias) {
        this(alias, NOUN);
    }

    /**
     * Create a <code>public.noun</code> table reference
     */
    public Noun() {
        this(DSL.name("noun"), null);
    }

    public <O extends Record> Noun(Table<O> child, ForeignKey<O, NounRecord> key) {
        super(child, key, NOUN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<NounRecord, Long> getIdentity() {
        return (Identity<NounRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<NounRecord> getPrimaryKey() {
        return Keys.NOUN_PKEY;
    }

    @Override
    public Noun as(String alias) {
        return new Noun(DSL.name(alias), this);
    }

    @Override
    public Noun as(Name alias) {
        return new Noun(alias, this);
    }

    @Override
    public Noun as(Table<?> alias) {
        return new Noun(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Noun rename(String name) {
        return new Noun(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Noun rename(Name name) {
        return new Noun(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Noun rename(Table<?> name) {
        return new Noun(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
